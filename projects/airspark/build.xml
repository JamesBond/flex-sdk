<?xml version="1.0"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2006-2007 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<project name="airspark" default="main" basedir=".">

	<property name="FLEX_HOME" location="${basedir}/../../.."/>
    <property file="${FLEX_HOME}/build.properties"/>
	<property name="locale" value="en_US"/>
    <!-- If you change this, update <target-player/> in the <compc/> tasks. -->
    <property name="local.playerglobal.version" value="10"/>

		<macrodef name="bundle">
			<attribute name="locale"/>
			<sequential>
				<echo message="Compiling frameworks/locale/${locale}/airspark_rb.swc"/>
				<!-- Load the <compc> task. We can't do this at the <project> level -->
				<!-- because targets that run before flexTasks.jar gets built would fail. -->
				<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/lib/flexTasks.jar"/>
				<compc fork="true"
					   output="${FLEX_HOME}/frameworks/locale/${locale}/airspark_rb.swc"
					   locale="${locale}">
					<!-- If you change this, update ${local.playerglobal.version} above. -->
					<target-player>10</target-player>
					<jvmarg line="${compc.jvm.args}"/>
					<include-resource-bundles bundle="SharedResources"/>
					<include-resource-bundles bundle="collections"/>
					<include-resource-bundles bundle="containers"/>
					<include-resource-bundles bundle="controls"/>
					<include-resource-bundles bundle="core"/>
					<include-resource-bundles bundle="effects"/>
					<include-resource-bundles bundle="formatters"/>
					<include-resource-bundles bundle="skins"/>
					<include-resource-bundles bundle="styles"/>
					<include-namespaces/>
					<include-classes/>
					<source-path path-element="${FLEX_HOME}/frameworks/projects/framework/src"/>
					<source-path path-element="${FLEX_HOME}/frameworks/projects/framework/bundles/${locale}"/>
					<include-libraries/>
					<library-path/>
					<external-library-path dir="${FLEX_HOME}/frameworks/libs">
						<include name="player/${local.playerglobal.version}/playerglobal.swc"/>
					</external-library-path>
				</compc>
		</sequential>
	</macrodef>	
	
	<macrodef name="fat-swc">
		<attribute name="locale"/>
		<sequential>
			<mkdir dir="${basedir}/bundles/@{locale}/docs" />
			<zip destfile="${FLEX_HOME}/frameworks/locale/@{locale}/airspark_rb.swc" update="true">
				<zipfileset dir="${basedir}/bundles/@{locale}/docs" prefix="docs">
					<include name="*.*"/>
				</zipfileset>
			</zip>
			<delete dir="${basedir}/bundles/@{locale}/docs" failonerror="false"/>
		</sequential>
	</macrodef>	

	<macrodef name="bundler">
		<attribute name="locale"/>
		<sequential>
			<bundle locale="@{locale}"/>
			<fat-swc locale="@{locale}"/>
			<delete dir="${basedir}/bundles" includeemptydirs="true"/>
		</sequential>
	</macrodef>
	
	<target name="main" depends="clean,compile" description="Clean build of airspark.swc and en_US">
		<bundle locale="${locale}"/>
	</target>

	<target name="other.locales" depends="bundles-clean,bundles" description="Build other locale SWCs"/>

		<!-- The targets below set the 'locale' parameter and call it with <antcall>. -->
	<target name="bundles">
		<bundler locale="en_US"/><!-- American English resources  -->
	</target>
	
	<target name="clean">
		<delete failonerror="false">
			<fileset file="${basedir}/bundles.properties"/>
			<fileset dir="${FLEX_HOME}/frameworks/libs/air">
				<include name="airspark.swc"/>
				<include name="airspark.swc.incr"/>
			</fileset>
			<!-- airspark.swc was mistakenly being compiled into this directory for awhile. -->
			<!-- This can eventually be removed. -->
			<fileset dir="${FLEX_HOME}/frameworks/libs">
				<include name="airspark.swc"/>
				<include name="airspark.swc.incr"/>
			</fileset>
		</delete>
	</target>
	
	<target name="bundles-clean">
		<delete failonerror="false">
			<fileset dir="${FLEX_HOME}/frameworks/locale">
				<include name="*/airspark_rb.swc"/>
				<include name="*/airspark_rb.swc.incr"/>
			</fileset>
		</delete>
	</target>

	<target name="compile" description="Compiles airspark.swc">
		<echo message="Compiling frameworks/libs/air/airspark.swc"/>

		<!-- Load the <compc> task. We can't do this at the <project> level -->
		<!-- because targets that run before flexTasks.jar gets built would fail. -->
		<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/lib/flexTasks.jar"/>
		<!--
			Link in the classes (and their dependencies) for the MXML tags
			listed in this project's manifest.xml.
			Also link the additional classes (and their dependencies)
			listed in AIRSparkClasses.as,
			because these aren't referenced by the manifest classes.
			Compile against framework.swc, but don't link it into airspark.swc.
			Link in accessibility support.
			Include the appropriate CSS files and assets in the SWC.
			Don't include any resources in the SWC.
			Write a bundle list of referenced resource bundles
			into the file bundles.properties in this directory.
		-->
		<compc fork="true"
			   output="${FLEX_HOME}/frameworks/libs/air/airspark.swc"
			   resource-bundle-list="${basedir}/bundles.properties">
            <!-- If you change this, update ${local.playerglobal.version} above. -->
		    <target-player>10</target-player>
			<jvmarg line="${compc.jvm.args}"/>
			<namespace uri="library://ns.adobe.com/flex/spark" manifest="${basedir}/manifest.xml"/>
			<include-namespaces uri="library://ns.adobe.com/flex/spark"/>
			<include-classes>AIRSparkClasses</include-classes>
			<source-path path-element="${basedir}/src"/>
			<library-path/>
			<external-library-path dir="${FLEX_HOME}/frameworks/libs">
				<include name="air/airglobal.swc"/>
				<include name="air/airframework.swc"/>
				<include name="framework.swc"/>
				<include name="spark.swc"/>
	                  <include name="textLayout.swc"/>
			</external-library-path>
			<include-file name="defaults.css" path="${basedir}/defaults.css"/>
			<locale/>
		        <keep-as3-metadata name="SkinPart"/>
		        <accessible>true</accessible>
		</compc>
	</target>
	
	<target name="doc" depends="clean-temp-docs" description="updates airspark.swc with asdoc xml">
		<!-- Load the <asdoc> task. We can't do this at the <project> level -->
		<!-- because targets that run before flexTasks.jar gets built would fail. -->
		<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/lib/flexTasks.jar"/>

	    <condition property="asdoc.jvm.args" value="-Xmx384m">
	        <os family="windows"/>
	    </condition>

	    <condition property="asdoc.jvm.args" value="-Xmx512m">
	        <os family="mac"/>
	    </condition>

	    <condition property="asdoc.jvm.args" value="-Xmx512m">
	        <os family="unix"/>
	    </condition>

		<!-- Call asdoc to generate dita xml files -->
		<asdoc output="${FLEX_HOME}/tempDoc" lenient="true" failonerror="true" keep-xml="true" skip-xsl="true" fork="true" >
		    <compiler.source-path path-element="${basedir}/src"/>
		    <doc-classes class="AIRSparkClasses"/>
		    <external-library-path dir="${FLEX_HOME}/frameworks/libs/air">
		    	<include name="airglobal.swc" />
		    	<include name="airframework.swc" />
		    </external-library-path>
		    <external-library-path dir="${FLEX_HOME}/frameworks/libs">
		    	<include name="framework.swc" />
          		<include name="spark.swc" />
          		<include name="textLayout.swc" />
			</external-library-path>

		    <library-path/>

            <namespace uri="library://ns.adobe.com/flex/spark" manifest="${basedir}/manifest.xml"/>
			<doc-namespaces uri="library://ns.adobe.com/flex/spark"/>

      <jvmarg line="${asdoc.jvm.args}"/>
		</asdoc>

		<!-- updates airspark.swc with asdoc xml -->
		<zip destfile="${FLEX_HOME}/frameworks/locale/en_US/airspark_rb.swc" update="true">
		    <zipfileset dir="${FLEX_HOME}/tempDoc/tempdita" prefix="docs">
			    <include name="*.*"/>
				<exclude name="ASDoc_Config.xml"/>
				<exclude name="overviews.xml"/>
		    </zipfileset>
		</zip>
	</target>

	<target name="clean-temp-docs">
		<delete dir="${FLEX_HOME}/tempDoc" failonerror="false" includeEmptyDirs="true"/>
	</target>
</project>
