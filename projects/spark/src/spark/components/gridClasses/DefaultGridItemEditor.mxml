<?xml version="1.0" encoding="utf-8"?>
<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2010 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->
<s:GridItemEditor xmlns:fx="http://ns.adobe.com/mxml/2009" 
                                  xmlns:s="library://ns.adobe.com/flex/spark" 
                                  xmlns:mx="library://ns.adobe.com/flex/mx" 
                                  xmlns:gridEditorClasses="spark.components.gridEditorClasses.*">
    
    <fx:Script>
        <![CDATA[
            import spark.core.IEditableText;
            import mx.events.FlexEvent;
            import spark.primitives.Rect;
            import mx.core.IUITextField;
            import mx.core.IVisualElement;
            import mx.core.UIComponent;
            import mx.managers.ISystemManager;
            
            //--------------------------------------------------------------------------
            //
            //  Overridden properties
            //
            //--------------------------------------------------------------------------

            /**
             *  @private
             */ 
            override public function get value():Object
            {
                return textArea.text;            
            }
            
            /**
             *  @private
             */ 
            override public function set value(newValue:Object):void
            {
                textArea.text = newValue.toString();
            }
            
            //--------------------------------------------------------------------------
            //
            //  Overidden methods
            //
            //--------------------------------------------------------------------------

            /**
             *  @private
             */ 
            override public function prepare():void
            {
                super.prepare();
                
                var cellBounds:Rectangle = column.grid.getCellBounds(rowIndex, columnIndex);
                var textDisplay:IEditableText = textArea.textDisplay;
                var itemRenderer:IVisualElement = dataGrid.grid.getItemRendererAt(rowIndex, columnIndex);

                if (itemRenderer is IUITextField)
                {
                    textDisplay.multiline = IUITextField(itemRenderer).multiline;
                    textDisplay.lineBreak = IUITextField(itemRenderer).wordWrap ? "toFit" : "explicit";
                    
                }
                else if ("multiline" in itemRenderer)
                {
                    textDisplay.multiline = itemRenderer["multiline"];                    
                }
                else
                {
                    textDisplay.multiline = false;                    
                }
                    
                if ("lineBreak" in itemRenderer)
                    textDisplay.lineBreak = itemRenderer["lineBreak"];
                    
                if (textDisplay.multiline == false &&
                    textDisplay.lineBreak == "explicit")
                {
                    // Single line control. Set the initial width to be the width of the cell.
                    textArea.width = NaN;
                    textArea.widthInChars = NaN;
                    
                    // Set a max width of six inches for the text or the visible edge of
                    // the application.
                    const MAX_WIDTH_INCHES:uint = 6;
                    var sm:ISystemManager = systemManager.topLevelSystemManager;
                    var screen:Rectangle = sm.getVisibleApplicationRect(null, true);
                    var globalCellTopLeft:Point = dataGrid.grid.localToGlobal(cellBounds.topLeft);

                    // Bug in text width: the width is allowed to grow larger than maxWidth so
                    // subtract 10 pixels to stay within the max.
                    textArea.maxWidth = Math.min(screen.right - globalCellTopLeft.x - 1, 
                                                 MAX_WIDTH_INCHES * Capabilities.screenDPI) - 10;
                }
                else
                {
                    textArea.width = cellBounds.width;
                }
                
                textArea.minWidth = cellBounds.width;
                textArea.height = cellBounds.height;
            }
            
            /**
             *  @private
             */ 
            override public function setFocus():void
            {
                textArea.setFocus();
            }
            
        ]]>
    </fx:Script>
    
    <s:TextArea id="textArea" horizontalScrollPolicy="off" verticalScrollPolicy="off" />
    
</s:GridItemEditor>
