////////////////////////////////////////////////////////////////////////////////
//
//  ADOBE SYSTEMS INCORPORATED
//  Copyright 2009 Adobe Systems Incorporated
//  All Rights Reserved.
//
//  NOTICE: Adobe permits you to use, modify, and distribute this file
//  in accordance with the terms of the license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////

package spark.accessibility
{

import flash.accessibility.Accessibility;
import flash.events.FocusEvent;
import flash.events.Event;

import mx.accessibility.AccConst;
import mx.core.UIComponent;
import mx.core.mx_internal;

import spark.components.NumericStepper;
import spark.components.TextInput;
import spark.events.SkinPartEvent;

use namespace mx_internal;

/**
 *  NumericStepperAccImpl is a subclass of AccessibilityImplementation
 *  which implements accessibility for the NumericStepper class.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 */
public class NumericStepperAccImpl extends SpinnerAccImpl
{
    include "../core/Version.as";
    
    //--------------------------------------------------------------------------
    //
    //  Class methods
    //
    //--------------------------------------------------------------------------

    /**
     *  Enables accessibility in the Spinner class.
     *
     *  <p>This method is called by application startup code
     *  that is autogenerated by the MXML compiler.
     *  Afterwards, when instances of Spinner are initialized,
     *  their <code>accessibilityImplementation</code> property
     *  will be set to an instance of this class.</p>
     *
     *  @langversion 3.0
     *  @playerversion Flash 10
     *  @playerversion AIR 1.5
     *  @productversion Flex 4
     */
    public static function enableAccessibility():void
    {
        NumericStepper.createAccessibilityImplementation = 
            createAccessibilityImplementation;
    }

    /**
     *  @private
     *  Creates a Spinner's AccessibilityImplementation object.
     *  This method is called from UIComponent's
     *  initializeAccessibility() method.
     */
    mx_internal static function createAccessibilityImplementation(
                                component:UIComponent):void
    {
        component.accessibilityImplementation =
            new NumericStepperAccImpl(component);
    }

    //--------------------------------------------------------------------------
    //
    //  Constructor
    //
    //--------------------------------------------------------------------------

    /**
     *  Constructor.
     *
     *  @param master The UIComponent instance that this AccImpl instance
     *  is making accessible.
     *
     *  @langversion 3.0
     *  @playerversion Flash 10
     *  @playerversion AIR 1.5
     *  @productversion Flex 4
     */
    public function NumericStepperAccImpl(master:UIComponent)
    {
        super(master);
        
        role = AccConst.ROLE_SYSTEM_TEXT;
		
		// NumericStepper has a TextInput as a skin part,
		// and we need to listen to some of its events.
		// It may or may not be present when this constructor is called.
		// If it comes or goes later, we are notified via
		// "partAdded" and "partRemoved" events.
		var textDisplay:TextInput = NumericStepper(master).textDisplay;
        if (textDisplay)
		{
        	textDisplay.addEventListener(Event.CHANGE, eventHandler);        
        	textDisplay.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
		}
    }
    
	//--------------------------------------------------------------------------
	//
	//  Overridden properties: AccImpl
	//
	//--------------------------------------------------------------------------
	
	//----------------------------------
	//  eventsToHandle
	//----------------------------------
	
	/**
	 *  @private
	 *  Array of events that we should listen for from the master component.
	 */
	override protected function get eventsToHandle():Array
	{
		return super.eventsToHandle.concat([ SkinPartEvent.PART_ADDED,
											 SkinPartEvent.PART_REMOVED ]);
	}
	
	//--------------------------------------------------------------------------
	//
	//  Overridden event handlers: AccImpl
	//
	//--------------------------------------------------------------------------
	
	/**
	 *  @private
	 *  Override the generic event handler.
	 *  All AccImpl must implement this
	 *  to listen for events from its master component.
	 */
	override protected function eventHandler(event:Event):void
	{
		var textDisplay:TextInput;
		
		switch (event.type)
		{
			case SkinPartEvent.PART_ADDED:
			{
				textDisplay = NumericStepper(master).textDisplay;
				if (SkinPartEvent(event).instance == textDisplay)
				{
					textDisplay.addEventListener(Event.CHANGE,
												 eventHandler);        
					textDisplay.addEventListener(FocusEvent.FOCUS_IN,
												 focusInHandler);
				}
				break;
			}
				
			case SkinPartEvent.PART_REMOVED:
			{
				textDisplay = NumericStepper(master).textDisplay;
				if (SkinPartEvent(event).instance == textDisplay)
				{
					textDisplay.removeEventListener(Event.CHANGE,
													eventHandler);        
					textDisplay.removeEventListener(FocusEvent.FOCUS_IN,
													focusInHandler);
				}
				break;
			}
				
			default:
			{
				super.eventHandler(event);
			}
		}
	}
	
	//--------------------------------------------------------------------------
	//
	//  Event handlers
	//
	//--------------------------------------------------------------------------

	/**
     *  @private
     */
    private function focusInHandler(event:Event):void
    {
        Accessibility.sendEvent(master, 0, AccConst.EVENT_OBJECT_FOCUS);
    }
}

}
