<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<Skin xmlns="http://ns.adobe.com/mxml/2009">

    <Metadata>
        [HostComponent("flex.component.Scroller")]
    </Metadata> 
        
    <VScrollBar id="verticalScrollBar" visible="false" />
    <HScrollBar id="horizontalScrollBar" visible="false" />

    <Script>  
      <![CDATA[
    
        import flex.component.ScrollBar;
        import flex.core.Group;
        import flex.layout.LayoutItemFactory;
        import flex.intf.ILayoutItem;
        import flex.intf.IViewport;
        import mx.core.ScrollPolicy;

        private function layoutItemFor(item:Object):ILayoutItem
        {
            return (item) ? LayoutItemFactory.getLayoutItemFor(item) : null;
        }
        
        /**
         *  Computes the union of the preferred size of the visible 
         *  scrollbars and the viewport.  
         * 
         *  This becomes the ScrollerSkin's measuredWidth,Height.
         *    
         *  The ScrollerSkin's minimum size is only big enough to 
         *  acccomodate the visible scrollbars.
         * 
         *  The viewport does not contribute to the minimum size.
         * 
         *  Note also: at updateDisplayList() time, we honor the vertical
         *  scrollbar's minimum height, and the horizontal scrollbar's 
         *  minimum width.  
         *  
         *  @see #updateDisplayList
         */
	    override protected function measure():void
	    {
            var hsb:ScrollBar = horizontalScrollBar;
            var showHSB:Boolean = false;
            switch(hostComponent.horizontalScrollPolicy) {
                case ScrollPolicy.ON: 
                    if (hsb) showHSB = true; 
                    break;
                case ScrollPolicy.AUTO: 
                    if (hsb) showHSB = hsb.visible; 
                    break;
            } 

            var vsb:ScrollBar = verticalScrollBar;
            var showVSB:Boolean = false;
            switch(hostComponent.verticalScrollPolicy) {
               case ScrollPolicy.ON: 
                    if (vsb) showVSB = true; 
                    break;
                case ScrollPolicy.AUTO: 
                    if (vsb) showVSB = vsb.visible; 
                    break;
            }
            
            var measuredW:Number = 0;
            var measuredH:Number = 0;
            var minW:Number = 0;
            var minH:Number = 0;            
            
            var viewport:IViewport = hostComponent.viewport;
            if (viewport)
            {
	            var viewportLI:ILayoutItem = layoutItemFor(viewport);
	            measuredW = viewportLI.preferredSize.x;
	            measuredH = viewportLI.preferredSize.y;
            }
            
            if (showHSB)
            {
                var hsbLI:ILayoutItem = layoutItemFor(hsb);
                measuredH += hsbLI.preferredSize.y;
                minW += hsbLI.minSize.x;              
                minH += hsbLI.minSize.y;  
            }
            if (showVSB)
            {
                var vsbLI:ILayoutItem = layoutItemFor(vsb);
                measuredW += vsbLI.preferredSize.x;
                minW += vsbLI.minSize.x;
                minH += vsbLI.minSize.y;
            }
            measuredWidth = measuredW;
            measuredHeight = measuredH;
            minWidth = 0; 
            minHeight = 0;
	    }
	    
        /** 
         *  Arrange the viewport and scrollbars conventionally within
         *  the specified width and height: vertical scrollbar on the 
         *  right, horizontal scrollbar along the bottom.
         * 
         *  In other words, the Scroller's height will not
         *  shrink below the vertical scrollbar's minimum height, and its
         *  width will not shrink below the horizontal scrollbar's
         *  minimum width.
         * 
         *  The scrollbars are made visible if the viewport's content size is
         *  bigger than the actual size.
         * 
         *  If the visibility of either scrollbar changes we apply invalidateSize()
         *  to the ScrollerSkin.
         * 
         *  This causes new values for measuredWidth,Height to be computed, and 
         *  it causes the update process to be restarted.
         * 
         *  Note also: the logic for calling updateDisplayList and then restarting
         *  the process if the component has become invalid is in
         *  mx.managers.LayoutManager::validateDisplayList.
         * 
         *  param w The skin's unscaled width.
         *  param h The skin's unscaled height.
         *
         *  @see #measure 
         */	    
        override protected function updateDisplayList(w:Number, h:Number):void
        {  
            var viewport:IViewport = hostComponent.viewport;
            var hsb:ScrollBar = horizontalScrollBar;
            var vsb:ScrollBar = verticalScrollBar;
            var hsbLI:ILayoutItem = layoutItemFor(hsb);
            var vsbLI:ILayoutItem = layoutItemFor(vsb);
               
            // Decide which scrollbars will be visible
            var showHSB:Boolean = false;
            switch(hostComponent.horizontalScrollPolicy) {
                case ScrollPolicy.ON: 
                    if (hsb) showHSB = true; 
                    break;
                case ScrollPolicy.AUTO: 
                    if (hsb && viewport) showHSB = viewport.contentWidth > w; 
                    break;
            } 
            var showVSB:Boolean = false;
            switch(hostComponent.verticalScrollPolicy) {
               case ScrollPolicy.ON: 
                    if (vsb) showVSB = true; 
                    break;
                case ScrollPolicy.AUTO: 
                    if (vsb && viewport) showVSB = viewport.contentHeight > h;
                    break;
            }
            

            // Shrink the viewport's width,height for the visible scrollbars
            var viewportH:Number = h;
            var hsbH:Number = 0;
            if (showHSB) 
            {
                hsbH = hsbLI.preferredSize.y;
                viewportH -= hsbH;
            }
            var viewportW:Number = w;
            var vsbW:Number = 0;
            if (showVSB) 
            {
                vsbW = vsbLI.preferredSize.x;
                viewportW -= vsbW;
            }
                        
            // layout the viewport
            if (viewport)
            {
	            var viewportLI:ILayoutItem = layoutItemFor(viewport);
	            viewportLI.setActualPosition(0,0);
	            viewportLI.setActualSize(viewportW, viewportH);
            }
            setContentSize(w, h);

            // layout and sync the horizontal scrollbar
            var oldShowHSB:Boolean = false;
            if (hsb)
            {
                oldShowHSB = hsb.visible;
                hsb.visible = showHSB;
            }
            if (showHSB)
            {
	            hsb.pageSize = viewportW;
	            hsb.maximum = (viewport) ? viewport.contentWidth - viewportW : 0;
	            hsbLI.setActualPosition(0, h - hsbH);
	            hsbLI.setActualSize(Math.max(hsbLI.minSize.x, viewportW), hsbH);
            }
            if (oldShowHSB != showHSB)
                invalidateSize();

            // layout and sync the vertical scrollbar
            var oldShowVSB:Boolean = false;
            if (vsb)
            {
                oldShowVSB = vsb.visible;
	            vsb.visible = showVSB;
            }
            if (showVSB)
            {
	            vsb.pageSize = viewportH;
	            vsb.maximum = (viewport) ? viewport.contentHeight - viewportH : 0;
	            vsbLI.setActualPosition(w - vsbW, 0);
	            vsbLI.setActualSize(vsbW, Math.max(vsbLI.minSize.y, viewportH));
            }
            if (oldShowVSB != showVSB)
               invalidateSize();
            
        }
        	              
      ]]>
    </Script>

</Skin>