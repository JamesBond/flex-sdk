<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<Skin xmlns="http://ns.adobe.com/mxml/2009">

    <Metadata>
        [HostComponent("flex.component.Scroller")]
    </Metadata> 
        
    <VScrollBar id="verticalScrollBar" visible="false" />
    <HScrollBar id="horizontalScrollBar" visible="false" />

    <Script>  
      <![CDATA[
    
        import flex.component.ScrollBar;
        import flex.layout.LayoutItemFactory;
        import flex.intf.ILayoutItem;
        import flex.intf.IViewport;
        import mx.core.ScrollPolicy;

        private function layoutItemFor(item:Object):ILayoutItem
        {
            return (item) ? LayoutItemFactory.getLayoutItemFor(item) : null;
        }
        
        
	    override protected function measure():void
	    {
            var hsb:ScrollBar = horizontalScrollBar;
            var showHSB:Boolean = false;
            switch(hostComponent.horizontalScrollPolicy) {
                case ScrollPolicy.ON: 
                    if (hsb) showHSB = true; 
                    break;
                case ScrollPolicy.AUTO: 
                    if (hsb) showHSB = hsb.visible; 
                    break;
            } 

            var vsb:ScrollBar = verticalScrollBar;
            var showVSB:Boolean = false;
            switch(hostComponent.verticalScrollPolicy) {
               case ScrollPolicy.ON: 
                    if (vsb) showVSB = true; 
                    break;
                case ScrollPolicy.AUTO: 
                    if (vsb) showVSB = vsb.visible; 
                    break;
            }
            
            var viewportLI:ILayoutItem = layoutItemFor(hostComponent.viewport);
            var measuredW:Number = viewportLI.preferredSize.x;
            var measuredH:Number = viewportLI.preferredSize.y;
            var minW:Number = viewportLI.minSize.x;
            var minH:Number = viewportLI.minSize.y;
            
            if (showHSB)
            {
                var hsbLI:ILayoutItem = layoutItemFor(hsb);
                measuredH += hsbLI.preferredSize.y;
                minH += hsbLI.minSize.y;
            }
            if (showVSB)
            {
                var vsbLI:ILayoutItem = layoutItemFor(vsb);
                measuredW += vsbLI.preferredSize.x;
                minW += vsbLI.minSize.x;
            }
            measuredWidth = Math.max(minW, measuredW);
            measuredHeight = Math.max(minH, measuredH);
            minWidth = minW;
            minHeight = minH;
	    }
	    
	    
        override protected function updateDisplayList(w:Number, h:Number):void
        {  
            var viewport:IViewport = hostComponent.viewport;
            var hsb:ScrollBar = horizontalScrollBar;
            var vsb:ScrollBar = verticalScrollBar;
            var hsbLI:ILayoutItem = layoutItemFor(hsb);
            var vsbLI:ILayoutItem = layoutItemFor(vsb);
               
            // Decide which scrollbars will be visible
            var showHSB:Boolean = false;
            switch(hostComponent.horizontalScrollPolicy) {
                case ScrollPolicy.ON: 
                    if (hsb) showHSB = true; 
                    break;
                case ScrollPolicy.AUTO: 
                    if (hsb) showHSB = viewport.contentWidth > w; 
                    break;
            } 
            var showVSB:Boolean = false;
            switch(hostComponent.verticalScrollPolicy) {
               case ScrollPolicy.ON: 
                    if (vsb) showVSB = true; 
                    break;
                case ScrollPolicy.AUTO: 
                    if (vsb) showVSB = viewport.contentHeight > h
                    break;
            }
            

            // Shrink the viewport's width,height for the visible scrollbars
            var viewportH:Number = h;
            var hsbH:Number = 0;
            if (showHSB) 
            {
                hsbH = hsbLI.preferredSize.y;
                viewportH -= hsbH;
            }
            var viewportW:Number = w;
            var vsbW:Number = 0;
            if (showVSB) 
            {
                vsbW = vsbLI.preferredSize.x;
                viewportW -= vsbW;
            }
                        
            // layout the viewport
            var viewportLI:ILayoutItem = layoutItemFor(viewport);
            viewportLI.setActualPosition(0,0);
            viewportLI.setActualSize(viewportW, viewportH);
            setContentSize(w, h);

            // layout and sync the horizontal scrollbar
            var oldShowHSB:Boolean = false;
            if (hsb)
            {
                oldShowHSB = hsb.visible;
                hsb.visible = showHSB;
            }
            if (showHSB)
            {
	            hsb.pageSize = viewportW;
	            hsb.maximum = hostComponent.viewport.contentWidth - viewportW;
	            hsbLI.setActualPosition(0, h - hsbH);
	            hsbLI.setActualSize(viewportW, hsbH);
            }
            if (oldShowHSB != showHSB)
                invalidateSize();

            // layout and sync the vertical scrollbar
            var oldShowVSB:Boolean = false;
            if (vsb)
            {
                oldShowVSB = vsb.visible;
	            vsb.visible = showVSB;
            }
            if (showVSB)
            {
	            vsb.pageSize = viewportH;
	            vsb.maximum = hostComponent.viewport.contentHeight - viewportH;
	            vsbLI.setActualPosition(w - vsbW, 0);
	            vsbLI.setActualSize(vsbW, viewportH);
            }
            if (oldShowVSB != showVSB)
               invalidateSize();
            
        }
        	              
      ]]>
    </Script>

</Skin>