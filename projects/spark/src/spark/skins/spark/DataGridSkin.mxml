<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- 
The default skin class for a Spark DataGrid component.  

@see spark.components.DataGrid
-->

<s:SparkSkin 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009">
    
    <fx:Metadata>
        [HostComponent("spark.components.DataGrid")]
    </fx:Metadata>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    
    <fx:Script fb:purpose="styling">
        static private const exclusions:Array = ["scroller", "background"];
        static private const contentFill:Array = ["bgFill"];
        
        /**
         * @private
         */
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override public function get contentItems():Array {return contentFill};
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
        {
            if (getStyle("borderVisible") == true)
            {
                border.visible = true;
                background.left = background.top = background.right = background.bottom = 1;
                scroller.minViewportInset = 1;
            }
            else
            {
                border.visible = false;
                background.left = background.top = background.right = background.bottom = 0;
                scroller.minViewportInset = 0;
            }
            
            borderStroke.color = getStyle("borderColor");
            borderStroke.alpha = getStyle("borderAlpha");
            
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
    </fx:Script>    

    <!-- border -->
    <!--- @private -->
    <s:Rect left="0" right="0" top="0" bottom="0" id="border">
        <s:stroke>
            <!--- @private -->
            <s:SolidColorStroke id="borderStroke" weight="1"/>
        </s:stroke>
    </s:Rect>
    
    <!-- fill -->
    <!--- Defines the background appearance of the list-based component. -->
    <s:Rect id="background" left="1" right="1" top="1" bottom="1" >
        <s:fill>
            <!--- Defines the color of the background. The default color is 0xFFFFFF. -->
            <s:SolidColor id="bgFill" color="0xFFFFFF" />
        </s:fill>
    </s:Rect>
    
    <s:VGroup horizontalAlign="justify" gap="0" left="0" right="0" top="0" bottom="0">
        <s:HGroup gap="0">
            <s:Group width="1" height="1"/>
            <s:ColumnHeaderBar id="columnHeaderBar" skinClass="spark.skins.spark.ColumnHeaderBarSkin"/>
        </s:HGroup>        
        <s:Scroller id="scroller" minViewportInset="1" hasFocusableChildren="false" height="100%">
            <s:Grid id="grid">
                <s:defaultItemRenderer>
                    <fx:Component>
                        <s:GridItemRenderer>
                            <s:Label id="labelDisplay" paddingLeft="3" paddingRight="3" paddingBottom="5" paddingTop="10" width="100%"/> 
                        </s:GridItemRenderer>
                    </fx:Component>
                </s:defaultItemRenderer>
                
                <s:caretIndicator>
                    <fx:Component>
                        <s:Rect>
                            <s:stroke>
                                <s:SolidColorStroke color="0xFFBC7A" weight="2"/>
                            </s:stroke>
                        </s:Rect>
                    </fx:Component>
                </s:caretIndicator>
                
                <s:selectionIndicator>
                    <fx:Component>
                        <s:Rect>
                            <s:fill>
                                <mx:SolidColor color="0xC082FF"/>
                            </s:fill>                
                        </s:Rect>
                    </fx:Component>           
                </s:selectionIndicator>
                
                <s:columnSeparator>
                    <fx:Component>
                        <s:Line>
                            <s:stroke>
                                <s:SolidColorStroke color="0x000000" weight="1"/>
                            </s:stroke>
                        </s:Line>
                    </fx:Component>
                </s:columnSeparator>
                
                <s:rowSeparator>
                    <fx:Component>
                        <s:Line>
                            <s:stroke>
                                <s:SolidColorStroke color="0x000000" weight="1"/>
                            </s:stroke>
                        </s:Line>
                    </fx:Component>
                </s:rowSeparator>
                
                <s:hoverIndicator>
                    <fx:Component>
                        <s:Rect>
                            <s:fill>
                                <mx:SolidColor color="0xFFBC7A"/>
                            </s:fill>
                        </s:Rect>
                    </fx:Component>            
                </s:hoverIndicator>
                
                <s:rowBackground>
                    <fx:Component>
                        <s:Rect>
                            <fx:Script>
                                <![CDATA[
                                    
                                    // TBD: should get a grid argument as well, class should implement IGridElement
                                    public function initializeGridElement(rowIndex:int, columnIndex:int):void
                                    {
                                        rowBackgroundFillColor.color = ((rowIndex & 1) == 0) ? 0xFFFFFF : 0xE9D2FF;
                                    }
                                    
                                ]]>
                            </fx:Script>                
                            <s:fill>
                                <mx:SolidColor id="rowBackgroundFillColor"/>
                            </s:fill>
                        </s:Rect>
                    </fx:Component>
                </s:rowBackground>
            </s:Grid>
        </s:Scroller>    
    </s:VGroup>

</s:SparkSkin>
